/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.homesoft.dcp;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

/**
 * There's a staircase with N steps, and you can climb 1 or 2 steps at a time. Given N, write a function that returns
 * the number of unique ways you can climb the staircase. The order of the steps matters.
 * <p>
 * For example, if N is 4, then there are 5 unique ways:
 * <p>
 * 1, 1, 1, 1
 * 2, 1, 1
 * 1, 2, 1
 * 1, 1, 2
 * 2, 2
 * What if, instead of being able to climb 1 or 2 steps at a time, you could climb any number from a set of positive
 * integers X? For example, if X = {1, 3, 5}, you could climb 1, 3, or 5 steps at a time. Generalize your function to
 * take in X.
 */
public class Sample {
    @SuppressWarnings("FieldCanBeLocal")
    private boolean debug = false;

    public static void main(String[] args) {
        Sample sample = new Sample();

        sample.solve(4, new int[]{1, 2});
        sample.solve(5, new int[]{1, 3, 5});
    }

    private void solve(int length, int[] steps) {
        final LinkedList<Integer> path = new LinkedList<>();
        final Map<Integer, Integer> cache = new HashMap<>();
        final int result = get_steps(length, steps, path, cache);
        System.out.println("Result: " + result);
    }

    private int get_steps(final int length, final int[] steps, final LinkedList<Integer> path, final Map<Integer, Integer> cache) {
        if (cache.containsKey(length)) {
            final int cached_value = cache.get(length);
            if (debug) {
                System.out.println("Cached result: " + cached_value + " for length " + length);
            }

            return cached_value;
        }

        int count = 0;

        /*
         * length = 4; count = 5; path = {};                   1
         *   length = 3; count = 4; path = {1};                2
         *     length = 2; count = 2; path = {1, 1};           3
         *       length = 1; count = 1; path = {1, 1, 1};      4
         *         length = 0; count = 1; path = {1, 1, 1, 1}; 5
         *       length = 0; count = 2; path = {1, 1, 2};      6
         *     length = 1; count = 2 + 1; path = {1, 2};       7 (cached)
         *   length = 2; count = 2 + 2; path = {2};            8 (cached)
         */
        for (int step : steps) {
            if (length > step) {
                path.addFirst(step);
                count = count + get_steps(length - step, steps, path, cache);
                path.removeFirst();
            } else if (length == step) {
                if (debug) {
                    System.out.print("Terminal: ");
                    for (Integer s : path) {
                        System.out.print(s + ", ");
                    }
                    System.out.println(step);
                }

                count = count + 1;
            }
        }

        if (debug) {
            System.out.println("Caching value " + count + " for length " + length);
        }
        cache.put(length, count);

        return count;
    }
}
